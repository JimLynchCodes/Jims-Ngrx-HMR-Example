"use strict";
var store_1 = require('@ngrx/store');
function hotModuleReplacement(bootloader, module) {
    var COMPONENT_REF;
    var DATA = !!module.hot.data ?
        module.hot.data.state :
        undefined;
    console.log('APP STATE', DATA);
    console.time('bootstrap');
    if (document.readyState === 'complete') {
        bootloader(DATA)
            .then(function (cmpRef) { return COMPONENT_REF = cmpRef; })
            .then((function (cmpRef) { return (console.timeEnd('bootstrap'), cmpRef); }));
    }
    else {
        document.addEventListener('DOMContentLoaded', function () {
            bootloader(DATA)
                .then(function (cmpRef) { return COMPONENT_REF = cmpRef; })
                .then((function (cmpRef) { return (console.timeEnd('bootstrap'), cmpRef); }));
        });
    }
    function saveState(appState) {
        return appState.getState();
    }
    function beforeunload(event) {
        var appState = COMPONENT_REF.injector.get(store_1.Store);
        return saveState(appState);
    }
    window.WEBPACK_HMR_beforeunload = function () {
        window.removeEventListener('beforeunload', beforeunload);
    };
    module.hot.accept();
    window.addEventListener('beforeunload', beforeunload);
    module.hot.dispose(function (data) {
        console.time('dispose');
        var componentNode = COMPONENT_REF.location.nativeElement;
        var newNode = document.createElement(componentNode.tagName);
        // display none
        var currentDisplay = newNode.style.display;
        newNode.style.display = 'none';
        var parentNode = componentNode.parentNode;
        parentNode.insertBefore(newNode, componentNode);
        var appState = COMPONENT_REF.injector.get(store_1.Store);
        var state = saveState(appState);
        Object.assign(data, { state: state });
        COMPONENT_REF.dispose();
        newNode.style.display = currentDisplay;
        window.removeEventListener('beforeunload', beforeunload);
        console.timeEnd('dispose');
    });
}
exports.hotModuleReplacement = hotModuleReplacement;
